name: Build all

on:
    push:
      branches:
       - main
      paths:
       - 'deps/**'
       - 'src/**'
       - '**/CMakeLists.txt'
       - 'version.inc'
       - 'localization/**'
       - 'resources/**'
       - ".github/workflows/build_all.yml"
       - ".github/workflows/build_all.yml"

    pull_request:
      branches:
       - main
      paths:
       - 'deps/**'
       - 'src/**'
       - '**/CMakeLists.txt'
       - 'version.inc'
       - ".github/workflows/build_all.yml"
       - ".github/workflows/build_all.yml"

    workflow_dispatch: # allows for manual dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
  

jobs:
  check_cache: # determines if there is a cache and outputs variables used in cacheing process
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            name: Linux
          - os: windows-latest
            name: Windows
          - os: macos-12
            arch: x86_64
            name: macOS
          - os: macos-12
            arch: arm64
            name: macOS
    runs-on: ubuntu-20.04
    outputs:
      cache-hit: ${{ steps.cache_deps.outputs.cache.cache-hit }}
      cache-name: ${{ steps.set_outputs.outputs.cache-name }}
      cache-path: ${{ steps.set_outputs.outputs.cache-path }}
      hash: ${{ steps.set_outputs.outputs.hash }} # pass on so that it is not recomputed after build dir is created
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: set outputs
        id: set_outputs
        env:
          # helper vars to make more readable
          underscore-arch: ${{ matrix.os == 'macos-12' && '_' || ''}}${{ matrix.os == 'macos-12' && matrix.arch || '' }} # if is macos, make a string that does "_{arch}", else output nothing
          dash-arch: ${{ matrix.os == 'macos-12' && '-' || ''}}${{ matrix.os == 'macos-12' && matrix.arch || '' }} # if is macos, make a string that does "-{arch}", else output nothing
          dep-folder-name: ${{ (matrix.os == 'windows-latest' || matrix.os == 'macos-12') && 'OrcaSlicer_dep' || 'destdir' }}${{ env.underscore-arch }}
          # vars to be outputed
          cache-name: ${{ matrix.name }}${{ env.dash-arch }}-cache-orcaslicer_deps
          cache-path: ${{ github.workspace }}/deps/build${{ env.underscore-arch }}/${{ env.dep-folder-name }}
        # output above vars plus a hash of the original deps folder
        run: |
          echo "cache-name=${{ env.cache-name }}" >> "$GITHUB_OUTPUT"
          echo "cache-path=${{ env.cache-path }}" >> "$GITHUB_OUTPUT"
          echo "hash=${{ hashFiles('deps/**') }}" >> "$GITHUB_OUTPUT"
        
      # doesn't do anyting with cache here. only used to output if there is a cache hit to determine if next job should run
      - name: load cache
        id: cache_deps
        uses: actions/cache@v3
        with:
          path: ${{ steps.set_outputs.outputs.cache-path }}
          key: ${{ steps.set_outputs.outputs.cache-name }}-build-${{ steps.set_outputs.outputs.hash }} # hash of deps folder used to only rebuild if deps are modified
    
  build_deps: # build deps if needed. if so, build, cache, and upload artifacts
    needs: [check_cache]
    if: needs.check_cache.outputs.cache-hit != 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
          - os: windows-latest
          - os: macos-12
            arch: x86_64
          - os: macos-12
            arch: arm64
    runs-on: ${{ matrix.os }}
    env:
      date: #get rid of intellisense error

    steps:
        # SETUP
      - name: Checkout
        uses: actions/checkout@v3

      - name: setup dev on Windows
        if: matrix.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1

      - name: Get the date on Ubuntu and macOS
        if: matrix.os != 'windows-latest'
        id: get-date-unix
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash
        
      - name: Get the date on Windows
        if: matrix.os == 'windows-latest'
        id: get-date-windows
        run: echo "date=$(Get-Date -Format 'yyyyMMdd')" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
        shell: pwsh
        
      - name: load cache
        id: cache_deps
        uses: actions/cache@v3
        with:
          path: ${{ needs.check_cache.outputs.cache-path }}
          key: ${{ needs.check_cache.outputs.cache-name }}-build-${{ needs.check_cache.outputs.hash }} # hash of deps folder used to only rebuild if deps are modified

        # BUILD
      - name: Build deps on Windows
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: |
            choco install strawberryperl
            mkdir ${{ github.workspace }}/deps/build
            mkdir ${{ github.workspace }}/deps/build/OrcaSlicer_dep
            .\build_release_vs2022.bat deps
            .\build_release_vs2022.bat pack
            cd ${{ github.workspace }}/deps/build

      - name: Build deps on Mac
        if: matrix.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        run: |
            brew install cmake git gettext automake
            mkdir -p ${{ github.workspace }}/deps/build_${{ matrix.arch }}
            mkdir -p ${{ github.workspace }}/deps/build_${{ matrix.arch }}/OrcaSlicer_dep_${{ matrix.arch }}
            ./build_release_macos.sh -dp -a ${{ matrix.arch }}

      - name: Build deps on Ubuntu
        if: matrix.os == 'ubuntu-20.04'
        working-directory: ${{ github.workspace }}
        run: |
            sudo apt-get update
            sudo apt-get install -y cmake git g++ build-essential libgl1-mesa-dev m4 \
            libwayland-dev libxkbcommon-dev wayland-protocols extra-cmake-modules pkgconf \
            libglu1-mesa-dev libcairo2-dev libgtk-3-dev libsoup2.4-dev libwebkit2gtk-4.0-dev \
            libgstreamer1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-bad libosmesa6-dev wget sudo autoconf curl libunwind-dev
            mkdir -p ${{ github.workspace }}/deps/build
            mkdir -p ${{ github.workspace }}/deps/build/destdir
            sudo ./BuildLinux.sh -ur
            sudo chown $USER -R ./
            ./BuildLinux.sh -dr
            cd deps/build
            tar -czvf OrcaSlicer_dep_ubuntu_$(date +"%Y%m%d").tar.gz destdir
            
        # ARTIFACTS
      - name: Upload Dep Mac artifacts
        if: matrix.os == 'macos-12'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_dep_mac_${{ matrix.arch }}_${{ env.date }}
          path: ${{ github.workspace }}/deps/build_${{ matrix.arch }}/OrcaSlicer_dep*.tar.gz

      - name: Upload Dep Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_dep_win64_${{ env.date }}
          path: ${{ github.workspace }}/deps/build/OrcaSlicer_dep*.zip

      - name: Upload Dep Ubuntu artifacts
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_dep_ubuntu_${{ env.date }}
          path: ${{ github.workspace }}/deps/build/OrcaSlicer_dep_ubuntu_*.tar.gz
          
          
  build_orca:
    needs: [check_cache, build_deps]
    if: needs.check_cache.outputs.cache-hit == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
          - os: windows-latest
          - os: macos-12
            arch: x86_64
          - os: macos-12
            arch: arm64
    runs-on: ${{ matrix.os }}
    env:
      date:
      ver:

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the version and date on Ubuntu and macOS
        if: matrix.os != 'windows-latest'
        id: get-version-unix
        run: |
          ver=$(grep 'set(SoftFever_VERSION' version.inc | cut -d '"' -f2)
          echo "ver=$ver" >> $GITHUB_ENV
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash

      - name: Get the version and date on Windows
        if: matrix.os == 'windows-latest'
        id: get-version-windows
        run: |
          echo "date=$(Get-Date -Format 'yyyyMMdd')" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          # Extract the version from the file
          $versionContent = Get-Content version.inc -Raw
          if ($versionContent -match 'set\(SoftFever_VERSION "(.*?)"\)') {
              $ver = $matches[1]
          }
          echo "ver=$ver" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date: ${{ env.date }} version: $ver"
        shell: pwsh
        
      - name: load cache
        id: cache_deps
        uses: actions/cache@v3
        with:
          path: ${{ needs.check_cache.outputs.cache-path }}
          key: ${{ needs.check_cache.outputs.cache-name }}-build-${{ needs.check_cache.outputs.hash }} # hash of deps folder used to only rebuild if deps are modified
        
#   Mac
      - name: Install tools mac
        if: matrix.os == 'macos-12'
        run: |
          brew install cmake git gettext zstd tree
          mkdir -p ${{ github.workspace }}/deps/build_${{matrix.arch}}
          mkdir -p ${{ github.workspace }}/deps/build_${{matrix.arch}}/OrcaSlicer_dep_${{matrix.arch}}

      - name: Build slicer mac
        if: matrix.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        run: |
          ./build_release_macos.sh -s -n -a ${{matrix.arch}}

 # Thanks to RaySajuuk, it's working now
      - name: Sign app and notary
        if: github.ref == 'refs/heads/main' && matrix.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERTIFICATE_ID: ${{ secrets.MACOS_CERTIFICATE_ID }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $P12_PASSWORD $KEYCHAIN_PATH
          codesign --deep --force --verbose --options runtime --timestamp --entitlements ${{ github.workspace }}/scripts/disable_validation.entitlements --sign "$CERTIFICATE_ID" ${{ github.workspace }}/build_${{matrix.arch}}/OrcaSlicer/OrcaSlicer.app
          ln -s /Applications ${{ github.workspace }}/build_${{matrix.arch}}/OrcaSlicer/Applications
          hdiutil create -volname "OrcaSlicer" -srcfolder ${{ github.workspace }}/build_${{matrix.arch}}/OrcaSlicer -ov -format UDZO OrcaSlicer_Mac_${{matrix.arch}}_V${{ env.ver }}.dmg
          codesign --deep --force --verbose --options runtime --timestamp --entitlements ${{ github.workspace }}/scripts/disable_validation.entitlements --sign "$CERTIFICATE_ID" OrcaSlicer_Mac_${{matrix.arch}}_V${{ env.ver }}.dmg
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "${{ secrets.APPLE_DEV_ACCOUNT }}" --team-id "${{ secrets.TEAM_ID }}" --password "${{ secrets.APP_PWD }}"
          xcrun notarytool submit "OrcaSlicer_Mac_${{matrix.arch}}_V${{ env.ver }}.dmg" --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple OrcaSlicer_Mac_${{matrix.arch}}_V${{ env.ver }}.dmg

      - name: Create DMG without notary
        if: github.ref != 'refs/heads/main' && matrix.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        run: |
          ln -s /Applications ${{ github.workspace }}/build_${{matrix.arch}}/OrcaSlicer/Applications
          hdiutil create -volname "OrcaSlicer" -srcfolder ${{ github.workspace }}/build_${{matrix.arch}}/OrcaSlicer -ov -format UDZO OrcaSlicer_Mac_${{matrix.arch}}_V${{ env.ver }}.dmg

      - name: Upload artifacts mac
        if: matrix.os == 'macos-12'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Mac_${{matrix.arch}}_V${{ env.ver }}
          path: ${{ github.workspace }}/OrcaSlicer_Mac_${{matrix.arch}}_V${{ env.ver }}.dmg

# Windows
      - name: setup MSVC
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1

      - name: Install nsis
        if: matrix.os == 'windows-latest'
        run: |
          dir "C:/Program Files (x86)/Windows Kits/10/Include"
          choco install nsis

      - name: Build slicer Win
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: .\build_release_vs2022.bat slicer

      - name: Create installer Win
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        run: |
          cpack -G NSIS

      # - name: pack app
        # if: matrix.os == 'windows-latest'
        #   working-directory: ${{ github.workspace }}/build
      #   shell: cmd
      #   run: '"C:/Program Files/7-Zip/7z.exe" a -tzip OrcaSlicer_dev_build.zip ${{ github.workspace }}/build/OrcaSlicer'

      - name: Upload artifacts Win zip
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Windows_V${{ env.ver }}_portable
          path: ${{ github.workspace }}/build/OrcaSlicer

      - name: Upload artifacts Win installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Windows_V${{ env.ver }}
          path: ${{ github.workspace }}/build/OrcaSlicer*.exe
# Ubuntu

      - name: Install dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf build-essential cmake curl eglexternalplatform-dev \
          extra-cmake-modules file git libcairo2-dev libcurl4-openssl-dev libdbus-1-dev libglew-dev libglu1-mesa-dev \
          libglu1-mesa-dev libgstreamer1.0-dev libgstreamerd-3-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \
          libgtk-3-dev libgtk-3-dev libmspack-dev libosmesa6-dev libsecret-1-dev libsoup2.4-dev libssl-dev libudev-dev libwayland-dev \
          libwebkit2gtk-4.0-dev libxkbcommon-dev locales locales-all m4 pkgconf sudo wayland-protocols wget

      - name: Install dependencies from BuildLinux.sh
        if: matrix.os == 'ubuntu-20.04'
        shell: bash
        run: sudo ./BuildLinux.sh -ur

      - name: Fix permissions
        if: matrix.os == 'ubuntu-20.04'
        shell: bash
        run: sudo chown $USER -R ./

      - name: Build slicer
        if: matrix.os == 'ubuntu-20.04'
        shell: bash
        run: |
          ./BuildLinux.sh -isr
          chmod +x ./build/OrcaSlicer_ubu64.AppImage
        
      - name: Upload artifacts Ubuntu
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Linux_V${{ env.ver }}
          path: './build/OrcaSlicer_ubu64.AppImage'